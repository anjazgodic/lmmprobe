require(Rcpp)
require(RcppArmadillo)
library(dplyr)
library(snowfall)
library(lme4)
source_R = list.files(c("~/Documents/lmmprobe/"),
pattern="*.R$", full.names=TRUE,
ignore.case=TRUE)[-12]
sapply(source_R,source,.GlobalEnv)
# source cpp files
source_cpp = list.files(c("~/Documents/lmmprobe/"),
pattern="*.cpp$", full.names=TRUE,
ignore.case=TRUE)
for(i in source_cpp){ sourceCpp(i) }
##### Reading in datasets ######
load("~/Documents/AnjaZgodic_Dissertation/Aim_2/Analysis/SLE_Longitudinal_972_eset.RData")
#Select expression and phenotype data
gene <- t(exprs(eset))
pheno <- pData(eset)
ann <- (fData(eset))
for(i in 72:95){
pheno[,i][pheno[,i] %in% c(2, 4, 8)] <- 1
pheno[,i][pheno[,i] %in% c(NA)] <- 0
}
symp <- (72:95)[(colSums(pheno[,72:95], na.rm = T) > 20)]
pheno$female <- ifelse(pheno$GENDER %in% "F", 1, 0)
pheno$nonwhite <- ifelse(pheno$RACE %in% c("AA", "H"), 1, 0)
var_list <- c("SUBJECT", "VISIT", "AGE", "WBC", "NEUTROPHIL_COUNT", "ESR", "female", "nonwhite", names(pheno)[symp]) #"ESR", "HGB", "C3", "C4"
pheno <- pheno[, var_list]
names(pheno)[1:2] <- c("subject", "time")
row.names(pheno) <- NULL
pheno$DS_DNA <- NULL
#order matrices
pheno$row <- 1:nrow(pheno)
pheno <- pheno[order(pheno$subject, pheno$time),]
#create ID and time
pheno <- pheno[complete.cases(pheno), ]
pheno <- pheno[grepl("SLE", pheno$subject),]
pheno <- pheno %>% group_by(subject) %>% mutate(visit = 1:n())
pheno$ID <- match(pheno$subject, unique(pheno$subject))
tmp <- pheno %>% group_by(subject) %>% summarise(max = max(visit))
table(tmp$max)
sub_del <- tmp$subject[tmp$max %in% c(1, 2)]
pheno <- pheno[!(pheno$subject %in% sub_del),]
pheno <- merge(pheno, tmp, by = "subject", all.x = T)
pheno$keep <- (pheno$visit == pheno$max) | (pheno$visit == (pheno$max-1))
pheno$keep[pheno$visit == 1] <- T
pheno$max <- NULL
pheno <- pheno[pheno$keep == T, ]
pheno$keep <- NULL
pheno <- pheno %>% group_by(subject) %>% mutate(visit = 1:n())
#order matrices
gene <- gene[pheno$row, ]
no_var <- apply(gene, 2, function(x) length(unique(x)))
which(no_var < 30)
gene <- gene[, !colnames(gene) %in% names(which(no_var < 30))]
pheno_clin <- pheno[, !names(pheno) %in% c("ID", "visit", "time", "row", "subject")]
pheno <- pheno[, c("ID")]
#Find the outcome
ann <- data.frame(ann)
gene_name <- as.character(ann[ann$ILMN_Gene %in% "IFI6" & ann$Accession %in% "NM_022873.2", "Probe_Id"])
#check for data inconsistencies -- all good
gene[,1:ncol(gene)][] <- sapply(gene[,1:ncol(gene)][], as.numeric)
sum(is.na(gene))
pheno_clin[,1:ncol(pheno_clin)][] <- sapply(pheno_clin[,1:ncol(pheno_clin)][], as.numeric)
sum(is.na(pheno_clin))
#create outcome and sparse predictors matrix
y <- gene[, colnames(gene) %in% gene_name]
gene <- gene[, !colnames(gene) %in% gene_name]
names(y) <- NULL
row.names(gene) <- NULL
#create final dataset
intercept <- rep(1, nrow(pheno))
real_data <- data.frame(cbind(pheno$ID, y, intercept, gene, pheno_clin))
names(real_data)[1:3] <- c("id", "y", "intercept")
not_center <- length(which(names(pheno_clin)=="female"):ncol(pheno_clin))
real_data[,c(2,4:(ncol(real_data)-not_center))] <- apply(real_data[,c(2,4:(ncol(real_data)-not_center))], 2, scale)
real_data <- real_data[order(real_data$id),]
Y <- real_data[,"y"]
Z <- real_data[,4:ncol(real_data)]
V <- real_data[,c("id"), drop = F]
require(Rcpp)
require(RcppArmadillo)
library(dplyr)
library(snowfall)
library(lme4)
source_R = list.files(c("~/Documents/lmmprobe/"),
pattern="*.R$", full.names=TRUE,
ignore.case=TRUE)
source_R
sapply(source_R,source,.GlobalEnv)
# source cpp files
source_cpp = list.files(c("~/Documents/lmmprobe/"),
pattern="*.cpp$", full.names=TRUE,
ignore.case=TRUE)
source_cpp
require(Rcpp)
require(RcppArmadillo)
library(dplyr)
library(snowfall)
library(lme4)
source_R = list.files(c("~/Documents/lmmprobe/"),
pattern="*.R$", full.names=TRUE,
ignore.case=TRUE)
rm(list = ls())
require(Rcpp)
require(RcppArmadillo)
library(dplyr)
library(snowfall)
library(lme4)
source_R = list.files(c("~/Documents/lmmprobe/"),
pattern="*.R$", full.names=TRUE,
ignore.case=TRUE)
source_R
source_R = list.files(c("~/Documents/lmmprobe/"),
pattern="*.R$", full.names=TRUE,
ignore.case=TRUE)[-12]
sapply(source_R,source,.GlobalEnv)
# source cpp files
source_cpp = list.files(c("~/Documents/lmmprobe/"),
pattern="*.cpp$", full.names=TRUE,
ignore.case=TRUE)
source_cpp
for(i in source_cpp){ sourceCpp(i) }
##### Reading in datasets ######
load("~/Documents/AnjaZgodic_Dissertation/Aim_2/Analysis/SLE_Longitudinal_972_eset.RData")
#Select expression and phenotype data
gene <- t(exprs(eset))
pheno <- pData(eset)
ann <- (fData(eset))
for(i in 72:95){
pheno[,i][pheno[,i] %in% c(2, 4, 8)] <- 1
pheno[,i][pheno[,i] %in% c(NA)] <- 0
}
symp <- (72:95)[(colSums(pheno[,72:95], na.rm = T) > 20)]
pheno$female <- ifelse(pheno$GENDER %in% "F", 1, 0)
pheno$nonwhite <- ifelse(pheno$RACE %in% c("AA", "H"), 1, 0)
var_list <- c("SUBJECT", "VISIT", "AGE", "WBC", "NEUTROPHIL_COUNT", "ESR", "female", "nonwhite", names(pheno)[symp]) #"ESR", "HGB", "C3", "C4"
pheno <- pheno[, var_list]
names(pheno)[1:2] <- c("subject", "time")
row.names(pheno) <- NULL
pheno$DS_DNA <- NULL
#order matrices
pheno$row <- 1:nrow(pheno)
pheno <- pheno[order(pheno$subject, pheno$time),]
#create ID and time
pheno <- pheno[complete.cases(pheno), ]
pheno <- pheno[grepl("SLE", pheno$subject),]
pheno <- pheno %>% group_by(subject) %>% mutate(visit = 1:n())
pheno$ID <- match(pheno$subject, unique(pheno$subject))
tmp <- pheno %>% group_by(subject) %>% summarise(max = max(visit))
table(tmp$max)
sub_del <- tmp$subject[tmp$max %in% c(1, 2)]
pheno <- pheno[!(pheno$subject %in% sub_del),]
pheno <- merge(pheno, tmp, by = "subject", all.x = T)
pheno$keep <- (pheno$visit == pheno$max) | (pheno$visit == (pheno$max-1))
pheno$keep[pheno$visit == 1] <- T
pheno$max <- NULL
pheno <- pheno[pheno$keep == T, ]
pheno$keep <- NULL
pheno <- pheno %>% group_by(subject) %>% mutate(visit = 1:n())
#order matrices
gene <- gene[pheno$row, ]
no_var <- apply(gene, 2, function(x) length(unique(x)))
which(no_var < 30)
gene <- gene[, !colnames(gene) %in% names(which(no_var < 30))]
pheno_clin <- pheno[, !names(pheno) %in% c("ID", "visit", "time", "row", "subject")]
pheno <- pheno[, c("ID")]
#Find the outcome
ann <- data.frame(ann)
gene_name <- as.character(ann[ann$ILMN_Gene %in% "IFI6" & ann$Accession %in% "NM_022873.2", "Probe_Id"])
#check for data inconsistencies -- all good
gene[,1:ncol(gene)][] <- sapply(gene[,1:ncol(gene)][], as.numeric)
sum(is.na(gene))
pheno_clin[,1:ncol(pheno_clin)][] <- sapply(pheno_clin[,1:ncol(pheno_clin)][], as.numeric)
sum(is.na(pheno_clin))
#create outcome and sparse predictors matrix
y <- gene[, colnames(gene) %in% gene_name]
gene <- gene[, !colnames(gene) %in% gene_name]
names(y) <- NULL
row.names(gene) <- NULL
#create final dataset
intercept <- rep(1, nrow(pheno))
real_data <- data.frame(cbind(pheno$ID, y, intercept, gene, pheno_clin))
names(real_data)[1:3] <- c("id", "y", "intercept")
not_center <- length(which(names(pheno_clin)=="female"):ncol(pheno_clin))
real_data[,c(2,4:(ncol(real_data)-not_center))] <- apply(real_data[,c(2,4:(ncol(real_data)-not_center))], 2, scale)
real_data <- real_data[order(real_data$id),]
Y <- real_data[,"y"]
Z <- real_data[,4:ncol(real_data)]
V <- real_data[,c("id"), drop = F]
SLE <- list(Y, Z, V)
save(SLE, file = "~/Documents/lmmprobe/lmmprobe/data/SLE.RData")
str(SLE)
SLE <- list(Y = Y, Z = Z, V = V)
str(SLE)
SLE$V
SLE$Y
save(SLE, file = "~/Documents/lmmprobe/lmmprobe/data/SLE.RData")
# Come back to R and set your directory to the highest (root) folder of the package
# notes: https://cran.r-project.org/web/packages/roxygen2/roxygen2.pdf
# Run the roxygenise command to create the package documentation
roxygenise("~/Documents/lmmprobe/lmmprobe/")
library(pkgKitten)
library(roxygen2)
# Come back to R and set your directory to the highest (root) folder of the package
# notes: https://cran.r-project.org/web/packages/roxygen2/roxygen2.pdf
# Run the roxygenise command to create the package documentation
roxygenise("~/Documents/lmmprobe/lmmprobe/")
?sfExport
library(snowfall)
?sfExport
library(probe)
?probe
# Come back to R and set your directory to the highest (root) folder of the package
# notes: https://cran.r-project.org/web/packages/roxygen2/roxygen2.pdf
# Run the roxygenise command to create the package documentation
roxygenise("~/Documents/lmmprobe/lmmprobe/")
library(roxygen2)
# Come back to R and set your directory to the highest (root) folder of the package
# notes: https://cran.r-project.org/web/packages/roxygen2/roxygen2.pdf
# Run the roxygenise command to create the package documentation
roxygenise("~/Documents/lmmprobe/lmmprobe/")
# Come back to R and set your directory to the highest (root) folder of the package
# notes: https://cran.r-project.org/web/packages/roxygen2/roxygen2.pdf
# Run the roxygenise command to create the package documentation
roxygenise("~/Documents/lmmprobe/lmmprobe/")
# Come back to R and set your directory to the highest (root) folder of the package
# notes: https://cran.r-project.org/web/packages/roxygen2/roxygen2.pdf
# Run the roxygenise command to create the package documentation
roxygenise("~/Documents/lmmprobe/lmmprobe/")
# Come back to R and set your directory to the highest (root) folder of the package
# notes: https://cran.r-project.org/web/packages/roxygen2/roxygen2.pdf
# Run the roxygenise command to create the package documentation
roxygenise("~/Documents/lmmprobe/lmmprobe/")

// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Col_sum
List Col_sum(const arma::mat X);
RcppExport SEXP _lmmprobe_Col_sum(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(Col_sum(X));
    return rcpp_result_gen;
END_RCPP
}
// LM_by_col
List LM_by_col(const arma::vec y, const arma::mat X, double sigma2_lmm);
RcppExport SEXP _lmmprobe_LM_by_col(SEXP ySEXP, SEXP XSEXP, SEXP sigma2_lmmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_lmm(sigma2_lmmSEXP);
    rcpp_result_gen = Rcpp::wrap(LM_by_col(y, X, sigma2_lmm));
    return rcpp_result_gen;
END_RCPP
}
// LM_by_col_w_covs
List LM_by_col_w_covs(const arma::vec y, const arma::mat X, const arma::colvec X_adj, double sigma2_lmm);
RcppExport SEXP _lmmprobe_LM_by_col_w_covs(SEXP ySEXP, SEXP XSEXP, SEXP X_adjSEXP, SEXP sigma2_lmmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type X_adj(X_adjSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_lmm(sigma2_lmmSEXP);
    rcpp_result_gen = Rcpp::wrap(LM_by_col_w_covs(y, X, X_adj, sigma2_lmm));
    return rcpp_result_gen;
END_RCPP
}
// MVM
List MVM(const arma::mat X, const arma::vec v);
RcppExport SEXP _lmmprobe_MVM(SEXP XSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(MVM(X, v));
    return rcpp_result_gen;
END_RCPP
}
// Row_sum
List Row_sum(const arma::mat X);
RcppExport SEXP _lmmprobe_Row_sum(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(Row_sum(X));
    return rcpp_result_gen;
END_RCPP
}
// UNHIDEM_cpp0_5
List UNHIDEM_cpp0_5(const arma::vec y, const arma::mat Z, const arma::mat Vt, const arma::uvec rowind1, const arma::uvec rowind2, const arma::uvec colind1, const arma::uvec colind2, const arma::colvec Wt, const arma::colvec t_Dt2, const arma::colvec Vt1_2, const arma::colvec W_var, const arma::colvec delta, const arma::colvec beta_vec, double sigma2_lmm);
RcppExport SEXP _lmmprobe_UNHIDEM_cpp0_5(SEXP ySEXP, SEXP ZSEXP, SEXP VtSEXP, SEXP rowind1SEXP, SEXP rowind2SEXP, SEXP colind1SEXP, SEXP colind2SEXP, SEXP WtSEXP, SEXP t_Dt2SEXP, SEXP Vt1_2SEXP, SEXP W_varSEXP, SEXP deltaSEXP, SEXP beta_vecSEXP, SEXP sigma2_lmmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Vt(VtSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type rowind1(rowind1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type rowind2(rowind2SEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type colind1(colind1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type colind2(colind2SEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type Wt(WtSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type t_Dt2(t_Dt2SEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type Vt1_2(Vt1_2SEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type W_var(W_varSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type beta_vec(beta_vecSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_lmm(sigma2_lmmSEXP);
    rcpp_result_gen = Rcpp::wrap(UNHIDEM_cpp0_5(y, Z, Vt, rowind1, rowind2, colind1, colind2, Wt, t_Dt2, Vt1_2, W_var, delta, beta_vec, sigma2_lmm));
    return rcpp_result_gen;
END_RCPP
}
// UNHIDEM_cpp0_5_w_covs
List UNHIDEM_cpp0_5_w_covs(const arma::vec y, const arma::mat Z, const arma::mat Vt, const arma::colvec X_adj, const arma::uvec rowind1, const arma::uvec rowind2, const arma::uvec rowind3, const arma::uvec colind1, const arma::uvec colind2, const arma::uvec colind3, const arma::colvec Wt, const arma::colvec t_Dt2, const arma::colvec t_Dt3, const arma::colvec Vt1_2, const arma::colvec Vt1_3, const arma::colvec Vt2_3, const arma::colvec W_var, const arma::colvec delta, const arma::colvec beta_vec, double sigma2_lmm);
RcppExport SEXP _lmmprobe_UNHIDEM_cpp0_5_w_covs(SEXP ySEXP, SEXP ZSEXP, SEXP VtSEXP, SEXP X_adjSEXP, SEXP rowind1SEXP, SEXP rowind2SEXP, SEXP rowind3SEXP, SEXP colind1SEXP, SEXP colind2SEXP, SEXP colind3SEXP, SEXP WtSEXP, SEXP t_Dt2SEXP, SEXP t_Dt3SEXP, SEXP Vt1_2SEXP, SEXP Vt1_3SEXP, SEXP Vt2_3SEXP, SEXP W_varSEXP, SEXP deltaSEXP, SEXP beta_vecSEXP, SEXP sigma2_lmmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Vt(VtSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type X_adj(X_adjSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type rowind1(rowind1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type rowind2(rowind2SEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type rowind3(rowind3SEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type colind1(colind1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type colind2(colind2SEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type colind3(colind3SEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type Wt(WtSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type t_Dt2(t_Dt2SEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type t_Dt3(t_Dt3SEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type Vt1_2(Vt1_2SEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type Vt1_3(Vt1_3SEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type Vt2_3(Vt2_3SEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type W_var(W_varSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type beta_vec(beta_vecSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_lmm(sigma2_lmmSEXP);
    rcpp_result_gen = Rcpp::wrap(UNHIDEM_cpp0_5_w_covs(y, Z, Vt, X_adj, rowind1, rowind2, rowind3, colind1, colind2, colind3, Wt, t_Dt2, t_Dt3, Vt1_2, Vt1_3, Vt2_3, W_var, delta, beta_vec, sigma2_lmm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lmmprobe_Col_sum", (DL_FUNC) &_lmmprobe_Col_sum, 1},
    {"_lmmprobe_LM_by_col", (DL_FUNC) &_lmmprobe_LM_by_col, 3},
    {"_lmmprobe_LM_by_col_w_covs", (DL_FUNC) &_lmmprobe_LM_by_col_w_covs, 4},
    {"_lmmprobe_MVM", (DL_FUNC) &_lmmprobe_MVM, 2},
    {"_lmmprobe_Row_sum", (DL_FUNC) &_lmmprobe_Row_sum, 1},
    {"_lmmprobe_UNHIDEM_cpp0_5", (DL_FUNC) &_lmmprobe_UNHIDEM_cpp0_5, 14},
    {"_lmmprobe_UNHIDEM_cpp0_5_w_covs", (DL_FUNC) &_lmmprobe_UNHIDEM_cpp0_5_w_covs, 20},
    {NULL, NULL, 0}
};

RcppExport void R_init_lmmprobe(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
